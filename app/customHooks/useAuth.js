import React from 'react'
import { Dispatch, AnyAction } from '@reduxjs/toolkit'
import { useSelector, useDispatch } from 'react-redux'
import { selectIsAuthenticated } from 'redux/user/UserSlice'

import {
  signInUserAPI,
  signUpUserAPI
} from 'apis/axios'

import {
  selectCurrentWareHouse,
  updateCurrentWareHouseState,
  isFirstTimeLaunchSelector,
  rememberdAccountSelector
} from 'redux/warehouse/WareHouseSlice'
import {
  selectCurrentUser,
  selectUserRole,
  updateUserRoleState,
  updateCurrentUser,
  updateCurrentUserStateByFields
} from 'redux/user/UserSlice'
import {
  updateCurrentNotifs
} from 'redux/notifications/NotificationsSlice'

import moment from 'moment'

import FunctionsUtility from 'utilities/functions'
import {
  USER_ROLES
} from 'utilities/constants'
import {
  EMAIL_RULE
} from 'utilities/validators'

import {
  UserRoles,
  ActionProps,
  AuthenticateOptionsProps,
  UserForAuthProps
} from 'types/index.d.ts'

export const {
  useAuth,
  useAuthState,
  useAuthActions
} = (function() {
  /**
   * T·∫°o c√°c actions cho auth
   * @param {Dispatch<AnyAction>} dispatch 
   * @returns 
   */
  let createAuthActions = function(dispatch) {
    let actions = {
      /**
       * H√†m d√πng ƒë·ªÉ ƒë·ªÉ update d·ªØ li·ªáu v·ªÅ l·∫ßn ƒë·∫ßu ng∆∞·ªùi d√πng v√†o app.
       * @param {boolean} newState 
       * @returns 
       */
      updateIsFirstTimeLaunch: function(newState) {
        dispatch(updateCurrentWareHouseState({isFirstTimeLaunch: newState}))
      },
      /**
       * H√†m d√πng ƒë·ªÉ update d·ªØ li·ªáu t√†i kho·∫£n cho m·ªôt ng∆∞·ªùi d√πng.
       * @param {string} emailName 
       * @param {string} password 
       * @returns 
       */
      rememberAccount: function(emailName, password) {
        dispatch(updateCurrentWareHouseState({emailName, password}))
      },
      /**
       * H√†m d√πng ƒë·ªÉ update th·ªß c√¥ng `role` cho `user`.
       * @param {UserRoles} role 
       * @returns 
       */
      updateUserRole: function(role) {
        dispatch(updateUserRoleState(role))
      },
      /**
       * H√†m n√†y d√πng ƒë·ªÉ ƒëƒÉng nh·∫≠p.
       * @param {UserForAuthProps} data D·ªØ li·ªáu t√†i kho·∫£n c·ªßa ng∆∞·ªùi d√πng.
       * @param {AuthenticateOptionsProps} options G·ªçi sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng.
       */
      signin: async function(data, options) {
        try {
          if(
            options
            && options.checkConditionFirst
            && !options.checkConditionFirst()
          ) return;
    
          if (data.emailName && data.password) {
            // Phuong: check emailName is email or username
            let user 
            if (FunctionsUtility.validateRegex(data.emailName, EMAIL_RULE)) {
              user = {
                email: data.emailName,
                password : data.password
              }
            } else {
              user = {
                username: data.emailName,
                password : data.password
              }
            }
            console.log("üöÄ ~ file: useAuth.js:109 ~ signin ~ user:", user)
            // Phuong: call Api
            await signInUserAPI(user)
            .then((res) => {
              console.log("üöÄ ~ file: useAuth.js:113 ~ signin ~ res", res)
              if (res) {
                // Phuong: Update user in persistent store
                dispatch(updateCurrentUser(res.fullInfoUser))
                dispatch(updateCurrentNotifs(res.notifs))
                // Phuong: check rememberme
                if(options && options.callWhenResolve) options.callWhenResolve(data)
              }
            })
            .catch(error => {
              if(options && options.callWhenReject) options.callWhenReject()
            })
          }
        } catch (error) {
          console.error(error.message)
        }
      },
      /**
       * H√†m d√πng ƒë·ªÉ ƒëƒÉng k√≠ ng∆∞·ªùi d√πng v√†o app.
       * @param {any} data D·ªØ li·ªáu ƒëƒÉng k√Ω c·ªßa ng∆∞·ªùi d√πng.
       * @param {AuthenticateOptionsProps} options L√† m·ªôt m·∫£ng c√°c h√†m ƒë·ªÉ ch·∫°y tr∆∞·ªõc khi signup
       * @returns 
       */
      signup: async function(data, options) {
        try {
          if(
            options
            && options.checkConditionFirst
            && !options.checkConditionFirst()
          ) return;
    
          const birthday = ((moment(data.birthday, 'DD/MM/YYYY')).toDate()).getTime() / 1000;
          const userSignUp = {
            email: data.email,
            firstName: data.firstName,
            lastName: data.lastName,
            birthday: birthday,
            username: data.username,
            password: data.password,
            confirmPassword: data.confirmPassword
          }
          // Phuong: call Api
          signUpUserAPI(userSignUp)
          .then((res) => {
            if (res) {
              console.log("üöÄ ~ file: SignupScreen.js:80 ~ signUpUserAPI ~ userData", res)
              // Phuong: move to SigninScreen screen
              if(options && options.callWhenResolve) options.callWhenResolve();
            }
          })
          .catch(error => {
            if(options && options.callWhenReject) options.callWhenReject();
          })
        } catch (error) {
          
        }
      },
      /**
       * H√†m ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng b·∫±ng c√°ch x√°c th·ª±c ng∆∞·ªùi d√πng th√¥ng qua sign in.
       * @param {UserForAuthProps} data
       */
      getFullUserInfo: async function(data) {
        // N·∫øu m√† c√≥ isGetFullUserInfo t·ª©c l√† n√™n call api ƒë·ªÉ reset l·∫°i user m·∫∑c d√π ƒë√£ c√≥ trong state
        // l·∫•y emailname vs password t·ªèng warehouse
        await this.signin(data)
      }
    }

    FunctionsUtility.autoBind(actions);

    return actions
  }

  return {
    /**
     * Hook n√†y ch·ªâ d√πng ƒë·ªÉ s·ª≠ d·ª•ng c√°c ph∆∞∆°ng th·ª©c v√† state cho vi·ªác x√°c th·ª±c ng∆∞·ªùi d√πng.
     * @returns 
     */
    useAuth: function() {
      let isAuthenticated = useSelector(selectIsAuthenticated)
      let isFirstTimeLaunch = useSelector(isFirstTimeLaunchSelector)
      let rememberedAccount = useSelector(rememberdAccountSelector)
      let userRole = useSelector(selectUserRole)
      let user = useSelector(selectCurrentUser)

      let dispatch = useDispatch();

      let actions = React.useMemo(() => createAuthActions(dispatch))

      return {
        isAuthenticated,
        isFirstTimeLaunch,
        rememberedAccount,
        userRole,
        user,
        ...actions
      }
    },

    /**
     * Hook n√†y d√πng cho vi·ªác s·ª≠ d·ª•ng c√°c ph∆∞∆°ng th·ª©c cho vi·ªác x√°c th·ª±c ng∆∞·ªùi d√πng.
     * @returns 
     */
    useAuthActions: function() {
      let dispatch = useDispatch();

      let actions = React.useMemo(() => createAuthActions(dispatch))

      return actions
    },

    /**
     * Hook n√†y d√πng cho vi·ªác s·ª≠ d·ª•ng c√°c state cho vi·ªác x√°c th·ª±c ng∆∞·ªùi d√πng.
     * @returns 
     */
    useAuthState: function() {
      let isAuthenticated = useSelector(selectIsAuthenticated)
      let isFirstTimeLaunch = useSelector(isFirstTimeLaunchSelector)
      let rememberedAccount = useSelector(rememberdAccountSelector)
      let userRole = useSelector(selectUserRole)
      let user = useSelector(selectCurrentUser)

      return {
        isAuthenticated,
        isFirstTimeLaunch,
        rememberedAccount,
        userRole,
        user
      }
    }
  }
})()
import { refreshTokenAPI } from 'apis/axios'
import axios from 'axios'
import { updateLoading, updateNotif } from 'redux/manifold/ManifoldSlice'

import { signOutUserAPI, updateFiledsUser } from 'redux/user/UserSlice'

// Phuong: How can I use the Redux injectedStore in non-component files?
// Phuong: https://redux.js.org/faq/code-structure#how-can-i-use-the-redux-injectedStore-in-non-component-files
import {
  injectedStore
} from 'utilities/reduxStore'

let authorizedAxiosInstance = axios.create()
// Phuong: after 1 minutes api will timeout
authorizedAxiosInstance.defaults.timeout = 1000 * 60 

// Phuong: S·∫Ω cho ph√©p axios t·ª± ƒë·ªông g·ª≠i cookie trong m·ªói request l√™n BE
// authorizedAxiosInstance.defaults.withCredentials = true 
// Phuong: https://axios-http.com/docs/interceptors

// Phuong: Can thi·ªáp v√†o gi·ªØa request g·ª≠i ƒëi
authorizedAxiosInstance.interceptors.request.use(function (config) {
  // Phuong: Do something before request is sent
  console.log("Access token: ", injectedStore.getState().user.currentUser.accessToken);
  // config.data.accessToken = injectedStore.getState().user.currentUser.accessToken;
  return config
}, function (error) {
  // Phuong: Do something with request error
  return Promise.reject(error)
})

// Phuong: Kh·ªüi t·∫°o m·ªôt c√°i promise cho vi·ªác g·ªçi api refresh_token
// Phuong: M·ª•c ƒë√≠ch t·∫°o Promise n√†y ƒë·ªÉ khi n√†o g·ªçi api refresh_token xong xu√¥i th√¨ m·ªõi retry l·∫°i c√°c api b·ªã l·ªói tr∆∞·ªõc ƒë√≥.
let refreshTokenPromise = null

// Phuong: Can thi·ªáp v√†o gi·ªØa response tr·∫£ v·ªÅ
authorizedAxiosInstance.interceptors.response.use(function (response) {
  // Phuong: B·∫•t k·ª≥ m√£ status code n·∫±m trong ph·∫°m vi 200 - 299 th√¨ s·∫Ω l√† success v√† code ch·∫°y v√†o ƒë√¢y
  // Phuong: Do something with response data
  return response
  
}, function (error) {
  // Phuong: N·∫øu nh∆∞ nh·∫≠n m√£ 401 t·ª´ ph√≠a BE tr·∫£ v·ªÅ, g·ªçi api ƒëƒÉng xu·∫•t lu√¥n
  if (error.response?.status === 401) {
    console.log("Logout user....")
    injectedStore.dispatch(signOutUserAPI())
  }

  // Phuong: N·∫øu nh∆∞ nh·∫≠n m√£ 410 t·ª´ ph√≠a BE tr·∫£ v·ªÅ, g·ªçi api refresh_token
  const originalRequests = error.config
  if (error.response?.status === 410 && !originalRequests._retry) {
    originalRequests._retry = true

    // Phuong: Ki·ªÉm tra xem n·∫øu ch∆∞a c√≥ refreshTokenPromise th√¨ th·ª±c hi·ªán g√°n vi·ªác g·ªçi api refresh_token v√†o cho c√°i refreshTokenPromise n√†y
    if (!refreshTokenPromise) {
      console.log("Refresh token for User...")
      refreshTokenPromise = refreshTokenAPI()
        .then((data) => {return data?.accessToken}) 
        .catch(() => {
        // Phuong: N·∫øu nh·∫≠n b·∫•t k·ª≥ l·ªói n√†o t·ª´ api refresh token th√¨ c·ª© logout lu√¥n
          console.log("Logout user....")
          injectedStore.dispatch(signOutUserAPI())
        })
        .finally(() => {
        // Phuong: Xong xu√¥i h·∫øt th√¨ g√°n l·∫°i c√°i refreshTokenPromise v·ªÅ null
          refreshTokenPromise = null
        })
    }

    return refreshTokenPromise.then(accessToken => {
      // Phuong: Tr∆∞·ªùng h·ª£p n·∫øu d·ª± √°n c·∫ßn l∆∞u accessToken v√†o localstorage s·∫Ω vi·∫øt code ·ªü ƒë√¢y.
      injectedStore.dispatch(updateFiledsUser({
        accessToken: accessToken
      }))
      // Phuong: Quan tr·ªçng: Return l·∫°i axios instance c·ªßa ch√∫ng ta k·∫øt h·ª£p c√°c originalRequests ƒë·ªÉ call l·∫°i nh·ªØng api ban ƒë·∫ßu b·ªã l·ªói
      return authorizedAxiosInstance(originalRequests)
    })
  }

  // Phuong: B·∫Øt l·ªói n·∫±m ngo√†i ph·∫°m vi 200-299
  // Phuong: Any status codes that falls outside the range of 2xx cause this function to trigger
  // Phuong: Do something with response error
  let errorMessage = error?.message
  
  
  if (error.response?.data?.errors)
  errorMessage = error.response?.data?.errors
  console.log("üöÄ ~ file: AuthorizedAxiosInstance.js:99 ~ errorMessage", errorMessage)
  
  if (error.response?.status !== 410) {
    console.log("üöÄ ~ file: AuthorizedAxiosInstance.js:104 ~ error.response?.status", error.response?.status)
    injectedStore.dispatch(updateNotif({
      appearNotificationBottomSheet: true,
      contentNotificationBottomSheet: errorMessage
    }))
  }

  return Promise.reject(error)
})

export default authorizedAxiosInstance